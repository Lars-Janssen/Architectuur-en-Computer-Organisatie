<?xml version="1.0" encoding="ISO-8859-1"?>
<SIMPLE NAME="Control" PREFERREDNUMBERFORMAT="Hexadecimal" PREFERREDCYCLELENGTH="10">
    <PARAMETERS/>
    <FORMS>
        <ELLIPSE COLOR="#00A000" POSX="0.0" POSY="0.0" RADIUSX="20.0" RADIUSY="50.0">
            <STROKE/>
        </ELLIPSE>
        <TEXT POSX="0.0" POSY="0.0" HALIGN="CENTER" VALIGN="CENTER"
            COLOR="#00A000" FONT="Dialog,plain,12.0">Ctrl</TEXT>
    </FORMS>
    <IO>
        <INPUT BITS="32" SIGNED="false" POSX="-20.0" POSY="0.0" NAME="Instruction">
            <LABEL POSX="-10.0" POSY="0.0" HALIGN="RIGHT" VALIGN="CENTER"/>
        </INPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="15.0" POSY="-35.0" NAME="RegWrite">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="18.0" POSY="-25.0" NAME="MemToReg">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="19.0" POSY="-15.0" NAME="MemRead">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="20.0" POSY="-5.0" NAME="MemWrite">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="20.0" POSY="5.0" NAME="Branch">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="19.0" POSY="15.0" NAME="RegDst">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="6" SIGNED="false" POSX="18.0" POSY="25.0" NAME="ALUOp">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="15.0" POSY="35.0" NAME="ALUSrc">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
    </IO>
    <MEMORY/>
    <INTERNALS DELAY="3">
        <ACTION EVENT="INPUT_CHANGE">
{
		if (Instruction == 0)
		{
			RegDst =	0;
			ALUSrc =	0;
			MemToReg =	0;
			RegWrite =	0;
			MemRead =	0;
			MemWrite =	0;
			Branch =	0;
			ALUOp =		0b00;
		}
		else {
        6 bit Op = Instruction &gt;&gt; 26;
        6 bit Func = Instruction &amp; 0x3F;
		5 bit Shamt = (Instruction &gt;&gt; 6) &amp; 0x1F;
        if (Op == 0b000000) {
                if (Func == 0x18 || Func == 0x19 || Func == 0x1A || Func== 0x1B){
                RegDst =	0;
                ALUSrc =	0;
                MemToReg =	0;
                RegWrite =	0;
                MemRead =	0;
                MemWrite =	0;
                Branch =	0;
                ALUOp =		Instruction;
                } else {
                RegDst =	0;
                ALUSrc =	0;
                MemToReg =	0;
                RegWrite =	1;
                MemRead =	0;
                MemWrite =	0;
                Branch =	0;
                ALUOp =		Instruction;
                }
            } else if (Op == 0x04) {
                RegDst =	0; //BEQ
                ALUSrc =	0;
                MemToReg =	0;
                RegWrite =	0;
                MemRead =	0;
                MemWrite =	0;
                Branch =	1;
                ALUOp =		0x04;
            } else if (Op == 0x05) {
                RegDst =	0; //BNE
                ALUSrc =	0;
                MemToReg =	0;
                RegWrite =	0;
                MemRead =	0;
                MemWrite =	0;
                Branch =	1;
                ALUOp =		0x5;
           } else if (Op == 0x10) {
                RegDst =	0; //J 
                ALUSrc =	0;
                MemToReg =	0;
                RegWrite =	0;
                MemRead =	0;
                MemWrite =	0;
                Branch =	1;
                ALUOp =		0x10;   
          } else if (Op &lt;= 0x11) {
				RegDst =	1;
				ALUSrc =	1;
				MemToReg =	0;
				RegWrite =	1;
				MemRead =	0;
				MemWrite =	0;
				Branch =	0;
				ALUOp =		Op;
			} else if (Op == 0x20) {
				RegDst =	1;
				ALUSrc =	1;
				MemToReg =	1;
				RegWrite =	1;
				MemRead =	1;
				MemWrite =	0;
				Branch =	0;
				ALUOp =		0x9;
			} else if (Op == 0x2B) {
				RegDst =	0;
				ALUSrc =	1;
				MemToReg =	0;
				RegWrite =	0;
				MemRead =	0;
				MemWrite =	1;
				Branch =	0;
                //ALUOp =		0x2B; //SW bug tracing... pff
                ALUOp = 0x21;
             } else if (Op == 0x23){
				RegDst    = 1;
				ALUSrc    = 1;
				MemToReg =	1;
				RegWrite =	1;
				MemRead =	1;
				MemWrite =	0;
				Branch =	0;
				ALUOp =		Op;
			} 
		}
	}
		</ACTION>
    </INTERNALS>
</SIMPLE>

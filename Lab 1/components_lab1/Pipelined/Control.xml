<?xml version="1.0" encoding="ISO-8859-1"?>
<SIMPLE NAME="Control" PREFERREDNUMBERFORMAT="Hexadecimal" PREFERREDCYCLELENGTH="10">
    <PARAMETERS/>
    <FORMS>
        <ELLIPSE COLOR="#00A000" POSX="0.0" POSY="0.0" RADIUSX="20.0" RADIUSY="50.0">
            <STROKE/>
        </ELLIPSE>
        <TEXT POSX="0.0" POSY="0.0" HALIGN="CENTER" VALIGN="CENTER"
            COLOR="#00A000" FONT="Dialog,plain,12.0">Ctrl</TEXT>
    </FORMS>
    <IO>
        <INPUT BITS="32" SIGNED="false" POSX="-20.0" POSY="0.0" NAME="Instruction">
            <LABEL POSX="-10.0" POSY="0.0" HALIGN="RIGHT" VALIGN="CENTER"/>
        </INPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="14.0" POSY="-35.0" NAME="RegWrite">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="18.0" POSY="-25.0" NAME="MemToReg">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="19.0" POSY="-15.0" NAME="MemRead">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="20.0" POSY="-5.0" NAME="MemWrite">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="20.0" POSY="5.0" NAME="Branch">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="19.0" POSY="15.0" NAME="RegDst">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="5" SIGNED="false" POSX="17.0" POSY="25.0" NAME="ALUOp">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
        <OUTPUT BITS="1" SIGNED="false" POSX="14.0" POSY="35.0" NAME="ALUSrc">
            <LABEL POSX="10.0" POSY="0.0" HALIGN="LEFT" VALIGN="CENTER"/>
        </OUTPUT>
    </IO>
    <MEMORY/>
    <INTERNALS DELAY="3">
        <ACTION EVENT="INPUT_CHANGE">
											    {
														if (Instruction == 0)
														{
															RegDst =	0;
															ALUSrc =	0;
															MemToReg =	0;
															RegWrite =	0;
															MemRead =	0;
															MemWrite =	0;
															Branch =	0;
															ALUOp =		0b00;
														}
														else
														{
															0d6 bit Op = Instruction &gt;&gt; 0d26;
															if (Op == 0b000000)
															{
																RegDst =	0;
																ALUSrc =	0;
																MemToReg =	0;
																RegWrite =	1;
																MemRead =	0;
																MemWrite =	0;
																Branch =	0;
																ALUOp =		Instruction-1;
															} else if (Op &lt;= 0x11)
															{
																RegDst =	1;
																ALUSrc =	1;
																MemToReg =	0;
																RegWrite =	1;
																MemRead =	0;
																MemWrite =	0;
																Branch =	0;
																ALUOp =		Op-1;
															} else if (Op == 0x20)
															{
																RegDst =	1;
																ALUSrc =	1;
																MemToReg =	1;
																RegWrite =	1;
																MemRead =	1;
																MemWrite =	0;
																Branch =	0;
																ALUOp =		0x9;
															} else if (Op == 0x21)
															{
																RegDst =	0;
																ALUSrc =	1;
																MemToReg =	0;
																RegWrite =	0;
																MemRead =	0;
																MemWrite =	1;
																Branch =	0;
																ALUOp =		0x9;
															} else if (Op == 0x30)
															{
																RegDst =	0;
																ALUSrc =	0;
																MemToReg =	0;
																RegWrite =	0;
																MemRead =	0;
																MemWrite =	0;
																Branch =	1;
																ALUOp =		0x4;
															} else if (Op == 0x31)
															{
																RegDst =	0;
																ALUSrc =	0;
																MemToReg =	0;
																RegWrite =	0;
																MemRead =	0;
																MemWrite =	0;
																Branch =	1;
																ALUOp =		0x8;
															}
														}
													}
		</ACTION>
    </INTERNALS>
</SIMPLE>
